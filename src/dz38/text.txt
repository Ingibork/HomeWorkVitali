1. Написать класс Person который содержит поля:
	1.1. Строку nick - псевдоним пользователя
	1.2. Строку password - пароль (от 5 до 10 символов)
2. Написать класс Animal:
	2.1. Число age - возраст (от 1 до 15 лет)
	2.2. Строка nick - кличка
3. Написать класс с RandomString в котором будет один статический
метод String random(int stringLength):
	3.1. Параметр метода это количество символов которые должно
	 быть в строке
	3.2. Буквы в строке: Латиница, Кирилица, Пробел
4. При помощи рандома генерируем 1_000_000 разных объектов Person.
 заполняем LinkedList. Если компьютер глючит сделать 100_000. Поля
 заполняются рандомом
5. При помощи рандома генерируем 1_000_000 разных объектов Animal.
заполняем ArrayList. Если компьютер глючит сделать 100_000. Поля
заполняются рандомом
6. Создать класс PersonPasswordComparator который наследует
интерфейс Comparator из jdk. Данный класс должен сравнивать
длину пароля пользователей.
7*. Создать класс PersonPasswordAndNickComparator который
наследует интерфейс Comparator из jdk. Данный класс должен
 сравнивать длину пароля пользователей и сравнивать псевдонимы
 пользователей.
8. Создать класс AnimalAgeComparator который наследует интерфейс
Comparator из jdk. Данный класс должен сравнивать возраст животных.
9*. Создать класс AnimalAgeAndNickComparator который наследует
интерфейс Comparator из jdk. Данный класс должен сравнивать возраст
животных и сравнивать клички животных.
10. Отсортировать списки при помощи созданных компараторов 6 и 8.
11*. Отсортировать списки при помощи созданных компараторов 7 и 9.
 Особенность данных сортировок в том что у вас должна получиться
 сортировка по двум полям, сначала по первому, потом по второму.
  К примеру: есть список животных [{age: 10, nick: "Анатолий"},
  {age: 10, "Игнат"}, {age: 1, nick: "Люцифер"}, {age: 10, "Ярик"}].
   После сортировки должно получиться: [{{age: 1, nick: "Люцифер"},
    age: 10, nick: "Анатолий"}, {age: 10, "Игнат"},
     {age: 10, "Ярик"}] так как сначала сортируется по возрасту
     в порядке возрастания, а потом в рамках группу (age = 10),
     сортируется по кличке по возрастанию (по алфавиту).
12. Замерить скорость наполнения LinkedList и ArrayList.
Скорость наполнения - это разница между количеством миллисекунд
между началом вставки в список первого элемента, и количеством
 миллесукунд после конца вставки последного элемента.
 В комментарии написать количество миллисекунд. Для получения
 текущего количества миллесекунд использовать метод из
 jdk System.currentTimeMillis().
13. Удалить все элементы из списка Person при помощи iterator
14. Удалить все элементы из списка Animal при помощи любого из циклов.
15. Замерить скорость удаления LinkedList и ArrayList.
В комментарии написать количество миллисекунд.